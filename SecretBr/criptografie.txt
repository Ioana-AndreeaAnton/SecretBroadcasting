/*doar pentru destinatie1.txt*/
	ifstream in("destinatie1.txt");
	if (!in.good())
		perror("Fisier inexistent");

	string mesaj = "";
	char ch;
	while (in >> noskipws >> ch) {
		mesaj = mesaj + ch;
	}
	
	in.close();
	
	string msg1_decrypt = decriptare_vigenere(decrypt_key1, mesaj);
	
	string* impartire;
	impartire = new string[msg1_decrypt.length() / 8];
	for (int i = 0; i < msg1_decrypt.length() / 8; i++) {
		impartire[i] = msg1_decrypt.substr(i * 8, 8);
	}

	string str = "";
	for (int i = 0; i < msg1_decrypt.length() / 8; i++) {
		str = str + char(bitset<8>(impartire[i]).to_ullong());
	}

	
	//remove("cript_F1.png");
	//ofstream out("cript_F1.png");
	//out << str;
	//out.close();





/*functie de conversie a unui text citit binar*/
/*
string text_to_bin(string text) {
	int nrBinar[100];
	char c;
	string msg = "";
	for (int h = 0; h < text.length(); h++) {
		int i = 0;
		string numar = "";
		bitset<8> bitnr;

		int n = int(text[h]);
		while (n > 0) {
			nrBinar[i] = n % 2;
			n = n / 2;
			i++;
		}
		for (int j = i - 1; j >= 0; j--)
			numar = numar + to_string(nrBinar[j]);

		bitnr = bitset<8>(numar);
		msg = msg + bitnr.to_string();
	}
	return msg;


}
*/

/*Decriptare Vigenere*/

string decriptare_vigenere(string cheie, string mesaj) {
	citeste_alfabet();
	int i, k;
	int corect = 1;
	for (i = 0; cheie[i] != '\0'; i++) {
		int temp = da_cod(cheie[i]);
		if (temp < 0 || temp >= N)corect = 0;
	}
	k = i;
	if (!corect) {
		cout << "\nCheia aleasa contine caractere care nu sunt in alfabet." << endl;
		return 0;
	}
	
	char c;
	i = 0;
	string decodificat = "";
	for(int j=0;j<mesaj.length();j++) {
		decodificat=decodificat+ da_caracter(da_cod(mesaj[j]) + da_cod(cheie[i]));
		i++;
		if (i == k)i = 0;
	}
	return decodificat;
	
}


/*Verificam daca fisierul ii este destinat lui Bob*/
/*
string testeaza_fisier(const char* msg) {
	ifstream in(msg);
	if (!in) {
		cout << "Cannot open input file.\n";
	}
	bool flag = false;
	string str;

	while (getline(in, str)) {
		if (str.length() == 0) continue;
		string decodificat;
		string str1, str2;
		decodificat = decriptare_vigenere("0101111100110010001010010011111010111101000011111011", str);
		str1 = decodificat.substr(0, 128);
		str2 = decodificat.substr(128, 160);


		char* B1;
		B1 = new char[str1.length()];
		for (int i = 0; i < str1.length(); i++) B1[i] = str1[i];
		SHA1 sha;
		unsigned long* rezultat = sha.Valoare(B1, str1.length());
		bitset<32>* b;
		b = new bitset<32>[5];
		string str = "";
		for (int i = 0; i < 5; i++) {
			b[i] = bitset<32>(rezultat[i]);
			str = str + b[i].to_string();
		}
		if (str == str2) {
			cout << "Mesajul destinat lui Bob: " << msg << endl;
			cout << "Cheia de decriptare: " << str1 << endl;
			flag = true;
			return str1;
		}

	}
	if (flag == false) 
		return "Fisierul nu ii este destinat lui Bob";

}
*/

/*Citirea unui fisier png/jpg */
/*
void png_jpg(const char* sursa, const char* destinatie) {
	ifstream fin(sursa, ios::binary);
	ostringstream ostr;
	ofstream out(destinatie);

	unsigned char tmp;
	
	while (fin >> tmp) {
		ostr << tmp;
	}
	fin.close();
	string data(text_to_bin(ostr.str()));
	cout <<"Numarul de caractere din fisierul "<<destinatie<<": "<< data.length() << endl;
	out << data;

	out.close();

}
*/

long long int RSA_cheie(long long int n, long long int e) {
	long long int p, q, d, phi;
	factorizare(n, p, q);
	cout << p << " " << q << endl;
	phi = (p - 1) * (q - 1);
	cout << phi << endl;
	d = invers(e, phi);
	return d;

}
void decriptare(long long int& valoare, long long int n,long long int d) {
	int j, l, i, m;
	
	citeste_alfabet();
	for (i = 0, m = 1; m < n; i++) m *= N;
	cout << "j mai mare decat " << i << "= "; cin >> j;
	cout << "l mai mic decat " << i << "= "; cin >> l;
	
	int h = 0;
	string text = to_string(valoare);
	/*int nrBinar[100];

	while (valoare > 0) {
		nrBinar[h] = valoare % 2;
		valoare = valoare / 2;
		h++;
	}
	for (int k = h - 1; k >= 0; k--)
		text = text + to_string(nrBinar[k]);
	cout << text << endl;
	/**/
	
	string text_criptat = "";
	char* c;
	citeste_alfabet();
	c = new char[l >= j ? l : j];
	i = m = 0;
	for (int aux = 0; aux < text.size(); aux++) {
		c[i] = text[aux];
		m = m * N + da_cod(c[i]);
		if (i == j - 1) {
			m = a_la_b_mod_c(m, d, n);
			i = l - 1;
			while (m > 0) {
				c[i] = da_caracter(m % N);
				m = m / N;
				i--;
			}
			while (m > 0) {
				c[i] = da_caracter(m % N);
				m = m / N;
				i--;
			}
			while (i >= 0) c[i--] = da_caracter(0);
			for (i = 0; i < l; i++) text_criptat = text_criptat + c[i];
			i = 0;
		}
		else
			i++;
	}
	cout << text_criptat << endl;
	

}



int main() {
	//string decrypt_key1, decrypt_key2;
	//decrypt_key1=testeaza_fisier("msg1.txt");
	//decrypt_key2=testeaza_fisier("msg2.txt");
	
	//png_jpg("cript_F1.png", "destinatie1.txt");
	//png_jpg("cript_F2.jpg", "destinatie2.txt");

	/*ifstream in("destinatie1.txt");
	char ch;
	string mesaj1 = "";
	while (in >> noskipws >> ch) {
		mesaj1 = mesaj1 + ch;
	}
	in.close();
	string mesaj1_decrypt = decriptare_vigenere(decrypt_key1, mesaj1);
	string* impartire;
	string mesaj_png = "";
	impartire = new string[mesaj1_decrypt.length() / 8];
	for (int i = 0; i < mesaj1_decrypt.length() / 8; i++) {
		impartire[i] = mesaj1_decrypt.substr(i * 8, 8);
		mesaj_png = mesaj_png + char(bitset<8>(impartire[i]).to_ullong());
	}
	
	ofstream out("cript_F1.png", ios_base::out | ios_base::binary);
	out << mesaj_png;
	out.close();
	*/
	
	long long int n = 24797;
	long long  int e = 2591;
	long long int d = RSA_cheie(n, e);
	cout << d << endl;
	long long int valoare = 19494;
	decriptare(valoare, n, d);

	

	

	
	
	

	
	

	
	system("pause");
	return 0;





ifstream in("cript_F1.png", ios::binary | ios::in);
	ofstream out("decript_F1.png", ios::binary | ios::out);
	char ch;
	
	string mesaj = "";
	while (in >> noskipws >> ch) {
		mesaj = mesaj + bitset<8>(int(ch)).to_string();
	}
	string msg = decriptare_vigenere(decrypt_key1, mesaj);
	string* impartire;
	impartire = new string[msg.length() / 8];
	for (int i = 0; i < msg.length() / 8; i++) {
		impartire[i] = msg.substr(i * 8, 8);
	}

	string str = "";
	for (int i = 0; i < msg.length() / 8; i++) {
		str = str + char(bitset<8>(impartire[i]).to_ullong());
	}
	out << str << endl;
	
	in.close();
	out.close();



	ifstream in2("cript_F2.jpg", ios::binary | ios::in);
	ofstream out2("decript_F2.png", ios::binary | ios::out);
	char ch2;

	string mesaj2 = "";
	while (in2 >> noskipws >> ch2) {
		mesaj2 = mesaj2 + bitset<8>(int(ch2)).to_string();
	}
	string msg2 = decriptare_vigenere(decrypt_key2, mesaj2);
	string* impartire2;
	impartire2 = new string[msg2.length() / 8];
	for (int i = 0; i < msg2.length() / 8; i++) {
		impartire2[i] = msg2.substr(i * 8, 8);
	}

	string str2 = "";
	for (int i = 0; i < msg2.length() / 8; i++) {
		str2 = str2 + char(bitset<8>(impartire2[i]).to_ullong());
	}
	out2 << str2 << endl;

	in2.close();
	out2.close();